@page "/"

<style>
    

    table{
        text-align:center
    }

    thead {
        font-weight: bold;
        font-size: 16px;
    }

</style>

<div class="container">

    <h1 class="text-center">Welcome to Race to 21!</h1>

    @switch (Game.nextTask)
    {
        case Tasks.GetNumberOfPlayers:
            <h2 class="text-center">How many players?</h2>
            <div class="row justify-content-center">
                <input type="number" class="col-2" min="2" max="8" @bind="Game.numberOfPlayers" />
            </div>

            <div class="row justify-content-center">
                <button type="button" class="btn btn-primary mt-3" @onclick="() => { Game.nextTask = Tasks.GetNames;}">
                    Next
                </button>
            </div>
            break;

        case Tasks.GetNames:
            @for (int i = 0; i < Game.numberOfPlayers; i++)
            {
                int playerNumnber = i;
                <div class=" row justify-content-center">
                    <h3>Player#@(i + 1): </h3>
                    <input type="text" placeholder="Enter your name" @bind-value="playerNames[playerNumnber]" />

                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }


            <div class="row justify-content-center">
                <button type="button" class="btn btn-primary mt-3" @onclick="() => { AddPlayers(); }">
                    Add Players
                </button>

                <button type="button" class="btn btn-primary mt-3" @onclick="() => { Game.nextTask = Tasks.GetNumberOfPlayers; }">
                    Change Player Number
                </button>
            </div>

            break;
        case Tasks.PlayerTurn:

            
            <h2 class="text-center">The final winner will be the one who has more than 60 points!</h2>
            <h2 class="text-center">If everyone quits early, or if only one player is present, the player who has the highest points wins！</h2>



            @if (Game.players.Count < 5)
            {
                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>@player.name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>@player.status</td>
                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in player.cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    Score: @player.score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    Points:  @player.points
                                </td>
                            }
                        </tr>

                    </tbody>
                </table>
            }
            else
            {
                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>@Game.players[i].name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>@Game.players[i].status</td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in Game.players[i].cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    Score: @Game.players[i].score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    Points:  @Game.players[i].points
                                </td>
                            }
                        </tr>

                    </tbody>

                </table>

                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>@Game.players[i].name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>@Game.players[i].status</td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in Game.players[i].cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    Score: @Game.players[i].score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    Points:  @Game.players[i].points
                                </td>
                            }
                        </tr>

                    </tbody>

                </table>

            }

            <hr />

            <div class="row justify-content-center">
                <input type="range" min="0" max="3" @bind="drawCardsNumber" />
                <div class="col-2">@drawCardsNumber</div>
            </div>



            @if (Game.players[Game.currentPlayer].status == PlayerStatus.active)
            {
                <div class="text-center">
                    Player "@Game.players[Game.currentPlayer].Name" draw cards!
                </div>
            }
            else
            {
                <div class="text-center">
                    "@Game.players[Game.currentPlayer].Name", you can not draw cards, click the button to go to the next player!
                </div>
            }



            <div class="row justify-content-center">
                <button type="button" class="btn btn-primary mt-3" @onclick="() => { PlayerDrawCards(drawCardsNumber); CheckWinner();  }">
                    Draw Cards
                </button>
            </div>


            break;

        case Tasks.CheckForEnd:

            @if (Game.players.Count < 5)
            {
                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>@player.name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>@player.status</td>


                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in player.cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    Score: @player.score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @foreach (Player player in Game.players)
                            {
                                <td>
                                    Points:  @player.points
                                </td>
                            }
                        </tr>

                    </tbody>
                </table>
            }
            else
            {
                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>@Game.players[i].name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>@Game.players[i].status</td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in Game.players[i].cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    Score: @Game.players[i].score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 0; i < 4; i++)
                            {
                                <td>
                                    Points:  @Game.players[i].points
                                </td>
                            }
                        </tr>

                    </tbody>

                </table>

                <table class="table table-bordered justify-content-center">
                    <thead>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>@Game.players[i].name</td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>@Game.players[i].status</td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    <div class="text-center">
                                        Hands:
                                    </div>


                                    @foreach (Card card in Game.players[i].cards)
                                    {

                                        <img src="card_assets/@card.FullName" />

                                    }
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    Score: @Game.players[i].score
                                </td>


                            }
                        </tr>
                        <tr class="col-3">
                            @for (int i = 4; i < Game.players.Count; i++)
                            {
                                <td>
                                    Points:  @Game.players[i].points
                                </td>
                            }
                        </tr>

                    </tbody>

                </table>

            }

            <hr />

            <h2 class="text-center">
                Do you want to play another round?
            </h2>



            for (int i = 0; i < Game.players.Count; i++)
            {
                int playerIndex = i;
                <label for="@playerIndex" class="col-sm-6 col-form-label text-sm-right">
                    @Game.players[playerIndex].Name
                </label>

                <input type="checkbox" @bind="Game.players[playerIndex].isContinue" />

            }

            <div class="row justify-content-center">
                <button type="button" class="btn btn-primary mt-3" @onclick="ReBuildPlayerList">
                    Next
                </button>
            </div>
            break;

        case Tasks.GameOver:
            <div class="justify-content-center">
                @foreach (Player player in Game.players)
                {
                    <div class="text-center">
                        @player.name has @player.points points.
                    </div>
                }

                @foreach (Player player in Game.giveUpPlayers)
                {
                    <div class="text-center">
                        @player.name has @player.points points.
                    </div>
                }

                <hr />

                @if (Game.players.Find(player => player.points == Game.highPoints) != null)
                {
                    <div class="text-center">
                        <h3>
                            @Game.players.Find(player => player.points == Game.highPoints).Name  is the final winner!
                        </h3>
                    </div>
                }
                else if (Game.giveUpPlayers.Find(player => player.points == Game.highPoints) != null)
                {
                    <div class="text-center">
                        <h3>
                            @Game.giveUpPlayers.Find(player => player.points == Game.highPoints).Name  is the final winner!
                        </h3>
                    </div>
                }

                <div class="row justify-content-center">
                    <button class="btn btn-primary mt-3" @onclick="ResetGame">
                        Reset
                    </button>
                </div>

            </div>

            break;


    }

</div>

@code{

    protected override void OnInitialized()
    {

        Game.SetUpGame();

    }

    string[] playerNames = new string[8];

    string errorMessage = "";

    int drawCardsNumber;

    int lastTotalPlayers;

    private bool IsNameValid()
    {
        if (playerNames.Take(Game.numberOfPlayers).GroupBy(name => name).Any(group => group.Count() > 1))
        {
            errorMessage = "Please make sure all player names are unique.";
            return false;
        }

        return true;
    }

    private void AddPlayers()
    {
        if (IsNameValid())
        {
            for (int i = 0; i < Game.numberOfPlayers; i++)
            {
                Game.AddPlayer(playerNames[i]);
            }
            Game.nextTask = Tasks.PlayerTurn;
        }

    }

    private void PlayerDrawCards(int drawCardsNumber)
    {
        Player player = Game.players[Game.currentPlayer];
        if (player.status == PlayerStatus.active)
        {
            /* Implementation:
             * A player can choose to draw up to 3 cards each turn, but they get
             * all cards at once; they don’t get to decide after each card
             */
            if (drawCardsNumber != 0) // If the player want to draw cards
            {

                for (int i = 0; i < drawCardsNumber; i++) // Draw the number of cards indicated by the player
                {
                    Card card = Game.deck.DealTopCard();
                    player.cards.Add(card);
                }

                player.score = Game.ScoreHand(player);


                if (player.score > 21) // The player bust
                {
                    player.status = PlayerStatus.bust;

                    int losePoints = player.score - 21; // Implementation: If the player is bust, the player loses points equal to their hand total minus 21. (Level 2)
                    player.points -= losePoints;

                }
                else if (player.score == 21) // The player win
                {
                    player.status = PlayerStatus.win;
                }
            }
            else // The player do not want to draw cards at the beginning of the round.
            {
                player.status = PlayerStatus.stay;
            }

        }

    }


    private void CheckWinner()
    {
        if (!Game.CheckActivePlayers()) // No players' status is active
        {
            Player winner = Game.DoFinalScoring(); // Get the winner

            if (winner != null) // Implementation: When a player win, the player earns the points equal to his score. (Level 1)
            {
                winner.status = PlayerStatus.win;
                winner.points += winner.score;
            }


            // Adjust: Put the winner detection out of the AnnounceWinner method. If no player draws card, the game will not stop.
            if (winner != null) // If there is a winner
            {
                Game.currentPlayer = 0;
                int highPoints = 0;

                lastTotalPlayers = Game.players.Count;
                for (int i = 0; i < Game.players.Count; i++)
                {
                    if (Game.players[i].points > highPoints)
                    {
                        highPoints = Game.players[i].points;
                    }
                }
                Game.highPoints = highPoints;

                if (Game.highPoints < Game.pointsToGameOver)
                {
                    Game.nextTask = Tasks.CheckForEnd;
                }
                else
                {
                    Game.nextTask = Tasks.GameOver;
                }


            }
            else // There is no winner
            {
                foreach (var player in Game.players) // Reset all players status
                {
                    player.status = PlayerStatus.active;
                }

                if (Game.currentPlayer >= (Game.players.Count - 1)) // If the current player is the final player, reset the variable currentPlayer
                {
                    Game.currentPlayer = 0; // back to the first player...
                }

                Game.nextTask = Tasks.PlayerTurn;
            }

        }
        else // someone's status is active
        {
            if (Game.currentPlayer == (Game.players.Count - 1)) // Last player acts
            {
                Game.currentPlayer = 0;
            }
            else // Other player acts
            {
                Game.currentPlayer++;
            }

            Game.nextTask = Tasks.PlayerTurn;
        }
    }

    private void ReBuildPlayerList()
    {
        for (int i = 0; i < Game.players.Count; i++)
        {
            if (Game.players[i].isContinue == true)
            {
                Game.players[i].cards = new List<Card>();
                Game.players[i].score = 0;
                Game.players[i].status = PlayerStatus.active;
            }
            // If the player disagree, the player will be removed
            else if (Game.players[i].isContinue == false)
            {
                Game.giveUpPlayers.Add(Game.players[i]);
                Game.players.RemoveAt(i);
                i--; // When data in the list is removed, the Index of all the data after it is subtracted by one, so here i is also subtracted by one to avoid skipping data.

            }
        }

        if (Game.players.Count <= lastTotalPlayers && Game.players.Count > 1) // The number of player minus and there are still two or more players
        {
            Game.shufflePlayer();
            Game.deck.buildDeck();
            Game.deck.Shuffle();

            /*nextTask = Tasks.IntroducePlayers;*/
            Game.nextTask = Tasks.PlayerTurn;
        }
        else
        {
            Game.nextTask = Tasks.GameOver;
        }

    }

    private void ResetGame()
    {
        Game.players = new List<Player>();
        Game.giveUpPlayers = new List<Player>();
        Game.numberOfPlayers = 2;
        Game.deck.buildDeck();
        Game.deck.Shuffle();

        drawCardsNumber = 0;
        playerNames = new string[8];

        Game.nextTask = Tasks.GetNumberOfPlayers;
    }

}

